package com.yamacbayin.cinemaroomrestservice.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

@Component
public class CinemaRoom {
    @JsonProperty("total_rows")
    private int totalRows;
    @JsonProperty("total_columns")
    private int totalColumns;
    @JsonProperty("available_seats")
    private List<Seat> availableSeats;
    /**
     * Keys are generated by a seat's row and column numbers.
     * The formula: row * 10 + column
     */
    private ConcurrentHashMap<Integer, Seat> seats;
    private ConcurrentHashMap<String, Ticket> tickets;

    public CinemaRoom() {
        this.totalRows = 9;
        this.totalColumns = 9;

        seats = new ConcurrentHashMap<>(totalRows * totalColumns);
        tickets = new ConcurrentHashMap<>();

        for (int row = 1; row <= totalRows; row++) {
            for (int column = 1; column <= totalColumns; column++) {
                seats.put(getSeatKey(row, column), new Seat(row, column));
            }
        }
    }

    /**
     * Checks the seat's availability, books the seat if possible.
     *
     * @param seat the seat that client wants to book
     * @return Optional value of updated seat or empty
     */
    public Optional<Seat> purchaseSeat(Seat seat) {
        int key = getSeatKey(seat);
        if (seats.get(key).isAvailable()) {
            seats.get(key).setAvailable(Seat.PURCHASED);
            return Optional.of(seats.get(key));
        } else {
            return Optional.empty();
        }
    }

    /**
     * Generates a Ticket with random UUID for the purchased seat,
     * adds newly created Ticket to the tickets list.
     *
     * @param seat purchased seat to generate ticket for
     * @return new Ticket
     */
    public Ticket generateTicket(Seat seat) {
        UUID uuid = UUID.randomUUID();
        Ticket ticket = new Ticket(uuid.toString(), Ticket.ALIVE, seat);
        tickets.put(uuid.toString(), ticket);
        return ticket;
    }

    /**
     * Compares UUID with the UUIDs in the tickets map,
     * refunds if the UUID is valid and flags the seat as available.
     *
     * @param uuid of the ticket to refund
     * @return Optional value of refunded ticket or empty
     */
    public Optional<Seat> refundSeat(String uuid) {
        if (tickets.containsKey(uuid) && tickets.get(uuid).isAlive()) {
            tickets.get(uuid).setAlive(Ticket.EXPIRED);
            seats.get(getSeatKey(tickets.get(uuid).getSeat())).setAvailable(true);
            return Optional.of(tickets.get(uuid).getSeat());
        } else {
            return Optional.empty();
        }
    }

    private int getSeatKey(Seat seat) {
        return (seat.getRow() * 10) + seat.getColumn();
    }

    private int getSeatKey(int row, int column) {
        return (row * 10) + column;
    }

    public int getTotalRows() {
        return totalRows;
    }

    public void setTotalRows(int totalRows) {
        this.totalRows = totalRows;
    }

    public int getTotalColumns() {
        return totalColumns;
    }

    public void setTotalColumns(int totalColumns) {
        this.totalColumns = totalColumns;
    }

    public List<Seat> getAvailableSeats() {
        return seats.values().stream().filter(Seat::isAvailable).toList();
    }

    public void setAvailableSeats(List<Seat> availableSeats) {
        this.availableSeats = availableSeats;
    }

    @JsonIgnore
    public ConcurrentHashMap<Integer, Seat> getSeats() {
        return seats;
    }

    public void setSeats(ConcurrentHashMap<Integer, Seat> seats) {
        this.seats = seats;
    }

    @Override
    public String toString() {
        return "CinemaRoom{" +
                "totalRows=" + totalRows +
                ", totalColumns=" + totalColumns +
                ", availableSeats=" + availableSeats +
                ", seats=" + seats +
                ", tickets=" + tickets +
                '}';
    }
}